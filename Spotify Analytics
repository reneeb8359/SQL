# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.
#Next, I explored the data using the following SQL. 

#1. Which five songs has the highest energy?
SELECT track_name, artist_name, energy
FROM BIT_DB.Spotifydata
ORDER BY energy desc
LIMIT 5;

#2. Who are the top 10 artists based on popularity?
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

#3. What 3 tracks have the slowest tempo?
SELECT track_name, artist_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo asc
LIMIT 3;

#4. Determine the average popularity and danceability by artist and track. 
SELECT artist_name, track_name, AVG(popularity), AVG(danceability) 
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#5. Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH popularity_average_CTE AS (
SELECT artist_name,
AVG(popularity) AS average_popularity
FROM Spotifydata 
GROUP BY artist_name
) 

SELECT artist_name,average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;

#6. List of all the bike lanes that have an average safety rating of 4.0 or higher, what is the average safety rating for each of those bike lanes, and label them as "Safe Lane".
WITH safety_average_CTE AS (
SELECT street, AVG(safetyrating) AS average_safetyrating
FROM CityBikeLanes
GROUP BY street
)

SELECT street,average_safetyrating, 'Safe Lane' AS 'label'
FROM safety_average_CTE
WHERE average_safetyrating>=4;
